[["index.html", "An inferential analysis of Yu-gi-oh! Trading Card Game Preface", " An inferential analysis of Yu-gi-oh! Trading Card Game Lucas Diniz 2023-03-01 Preface In this portfolio, you will find case studies on the area of Data Analysis. "],["introduction.html", "Introduction Case studies", " Introduction We never had so much access to data in history like we have in the modern day. While such quantity is amazing on its own right, there is also danger in excess. For this, we need to properly understand the data, and this is the work of a Data Analyst. This professional’s job is to properly understand the data and use it to various applications. The demand for skilled data science practitioners in industry, academia, and the government is rapidly growing. This portfolio introduces concepts and skills that can help it tackle real-world data analysis challenges. Case studies Throughout the portfolio, we use motivating case studies. We try to realistically mimic a data scientist’s experience in each case study. We start by asking specific questions and answering these through data analysis for each of the concepts covered. We learn the ideas as a means to answer the questions. Case studies included in the portfolio are: Case Study Concept Airbnb in Big Cities Descriptive Analysis with SQL All codes and projects in this portfolio can be found on my Github page: GitHub "],["author.html", "About Me", " About Me I’m a beginner Data Analyst who changed areas after becoming interested recently in data analysis. I have a master’s degree in Historical Sociology, and I have noticed how many concepts from Data Analysis I already practiced on my previous studies in a more intuitive way. After that, I’ve become interested in diving deeper and learning programming and the necessary tools for the function. I love analyzing correlations and understanding how things affect each other and how some things can be optimized. On this page, you will find some of the projects I am currently working on. You can see my Linkedin. Here. "],["airbnb-brief-comparative-analysis.html", "1 Airbnb Brief Comparative Analysis 1.1 Introduction 1.2 Getting into the data 1.3 Comparisons 1.4 Conclusion", " 1 Airbnb Brief Comparative Analysis 1.1 Introduction Airbnb, Inc. is an American San Francisco-based company operating an online marketplace for short-term homestays and experiences. The company acts as a broker and charges a commission from each booking. The company was founded in 2008 by Brian Chesky, Nathan Blecharczyk, and Joe Gebbia. Airbnb is a shortened version of its original name, AirBedandBreakfast.com. The company has been the subject of criticism for lack of regulations and enabling increases in home rents. Nowadays, is a popular website amongst travelers all around the world and many times can be used as a substitute for traditional hotels. Since it’s an user-to-user website, it’s the users themselves who get in contact with each other and set up details about their stay. The website also provides an user review system - both for the contractors and lessees. The website provides some official data that can be obtained in “http://insideairbnb.com/get-the-data/” and the data used in this analysis is taken from December 29th, 2022. All of the files used in this analysis are provided in my github. I used the website before and then became curious as to the number of available places for rent in famous cities across the world. For this analysis, I used the data from the following cities: Tokyo (Japan), London (United Kingdom), Paris (France), Rio de Janeiro (Brazil) and Shanghai (China). The data can be obtained in the approachable CSV format, so I decided to use SQL to better glance at the data and to filter it effectively. The SQL tool I used for this is “DB Browser for SQLite”. 1.2 Getting into the data At first I was curious about only the city of Tokyo, which is where I live. From my own personal life experience, I noticed not so many people opt to choose an Airbnb location when they come to Tokyo, prefering staying in hotels. So my first question was: “How many available locations are there in Tokyo?” This can be accessed by the simple query: ``SELECT COUNT (DISTINCT id) FROM tokyolistings``` The result seemed surprisingly small, given the sheer size of Tokyo. We will come back to this result later. I then proceeded to the question: “What are the most concentrated neighbourhoods in Tokyo?, i.e. the ones which have the most amount of airbnb locations?” For this, I used the Following query ``SELECT COUNT (DISTINCT id) as Number , neighbourhoodFROM tokyolistingsGROUP BY neighbourhoodORDER BY Number DESC;``` Here, we can see the appearance of a NULL value within the neighbourhoods. This might be by some factors, but it most likely could be by the users not quite knowing in which neighbourhood their place was located or having no applicable value. Since the number of NULL values for neighbourhood is too high, it would not be a good idea to remove it from the analysis. However, looking better at the database structure shows us that there are two sets of neighbourhood data: one simply called “neighbourhood”, and another stated as “neighbourhood_cleansed”, which beyond not having any NULL values also seem to be easier to read. Since we don’t have direct access to who compiled the data, it is hard to make 100% sure if this is a more reliable column to use, but we can try it. The result was somewhat expected, with the district of Shinjuku being the most popular, followed by Taito. Shinjuku is the most populated region of Tokyo and it is a central hub for transportation within the metropolis, also having a Bullet Train station. Now comes a very important question for those who are interested in traveling: “What is the price average for each Neighbourhood?” Given some variables, such as size, type of location - entire apartment, single room, etc -, and other amenities, the price can vary wildly between the same neighbourhood. However, by determining the average, we can find overall good neighbourhoods to look into. We can filter those by both price and location at the same time using the following query: ``SELECT COUNT (DISTINCT id) as number_of_locations, neighbourhood_cleansed, ROUND(AVG(CAST(REPLACE(price, '$', '') AS INT))) as average_price FROM tokyolistingsGROUP BY neighbourhood_cleansedORDER BY number_of_locations DESC;``` Because the result was being skewed because of the “$” symbol and for the fact that the “price” column was a string, we need a way to convert it to a numeric value so that the analysis can go on without errors. We will also round the values with this query, we will even show which neighbourhood is the most expensive in descending order. For us to show in table form starting from the cheapest to most expensive, we can simply replace the last line with ``ORDER BY number_of_locations ASC;``` For the sake of better visual understanding, we can use graphs from now on to showcase the result of more complicated queries. We will limit the amount of values to the 20 most popular neighbourhoods to not overcrowd it with visual data. This gave us an interesting result, however we need to consider some factors in this step. First, we are not so sure about the currency in which the data is provided. “$” stands for the dollar symbol and the average price per region seems somewhat reasonable in dollars, however checking the data can show us some odd values, to say the least. Here, some values seem to defy common sense. While it’s true that websites such as ebay or airbnb, where is the owner who regulates the price of the product, many people seem to input values beyond the common sense. The opposite of too expensive can also be seen in the image bellow, where some values are simply “zero”. Part of the work of an analyst is to evaluate the quality and integrity of the data, and try to work around or understand when such oddities happen. Some things might be simply input errors from the analyst, but many times it could be just inconsistent data from the source, so we need to be careful about that. Also, while the maximum and minimum values seem absurd, the “average” values also seem a bit odd if they are to be taken in dollars. Organizing the data by ascending price can show us checking the table that there are too many high values in dollars, which seems a bit too overpriced, even though Tokyo has the fame of being an expensive city. We can also assume that the values are in the japanese Yen, where numbers tend to go higher than in dollars or euros. For example, the average price of 130 yen roughly equals to 1 dollar. The highest bill in Japan is that of 10.000 Yen, which is roughly valued at around 75US$ at the date of this analysis. Looking at all of this, we can go to the next step in our analysis. 1.3 Comparisons Since the number of results in Tokyo seemed relatively small for such a massive city. According to various sources, including https://worldpopulationreview.com/world-city-rankings/largest-metro-areas-in-the-world Tokyo has the most populated metropolitan region in the world. Less than 10 thousand airbnb locations just sounds so little. Then I’ve decided to investigate into other famous and populated metropolitan areas to establish comparisons. I’ve decided to analyze the following cities across the world: New York, Paris, London, Rio de Janeiro and Shanghai. For each city, for the sake of simplicity and speed, we can just glimpse over the data quickly using just two queries: quantity of total available places and then the division by price in each neighbourhood. Let’s start with New York. For a quick reminder, this would be the query for this case ``SELECT COUNT (DISTINCT id) as number_of_locations FROM newyorklistings``` The total result was more than four times that of Tokyo, which is impressive. Now let’s see the price divided by neighbourhood in a graph format. A glance at the “price” column can show us that the values seem a bit more reasonable than Tokyo if in dollars, however one must wonder why these values are in a string format and not in numeric in the first place. Now, for the sake of brevity, let’s do all the operations in the remaining cities. Paris London Rio de Janeiro And finally, Shanghai, which was a surprise. A whooping zero. I did a better investigation on the data to see if I had made some sort of mistake when importing the files. Then I’ve decided to take a look on the file itself. Since it is a CSV file, you can open it with a text editor. The final results had some interesting points, that could have a list of their own: 1 - The Shanghai data was empty, even looking at the text document showed us there is no data there. Even another data provided by the same website had the same result. Unfortunately, we are prone to faulty data in this line of work. 2 - It was surprising to see that London had the most listings of all of the locations, even more than Paris. While London is also a great tourist attraction, you would imagine Paris would the the number 1 in popularity. This could be an interesting case on studying data bias and how some assumptions can be disproven with data. 3 - Rio de Janeiro has a huge amount of available places, but the sheer amount available in Copacabana - while also having a huge average price - was surprising. It is a region known to be one of the most expensive in the city, while also attracting many and many tourists. It would be interesting to look it up further on the topic, but we can do so another time. Now we can come again to our initial question on this portion: if Tokyo is so massive, why does it have so few locations available? This is where the analyst job needs to be more investigative. Cold data can lead to many interesting points, but context is very important in any analysis. We could assume at first glance that maybe the culture of Airbnb doesn’t particularly suits the japanese public, or the traditional hotel industry has too much of a hold on the city. However, a simple search can show us a more detailed result as to why, explained well across the internet in traveling blogs and news outlets. It basically sums down to a change in regulation in 2018 regarding Airbnb and lodgings in Japan requiring a license. Many have dropped from the site because of this new regulation, making it unviable. Like this, we can see how huge of an impact local legislation and other practices can have on global businesses, even on established brands and services. 1.4 Conclusion Airbnb is not so popular in Japan compared to other locations around the world, but it seems a traveling person shouldn’t have much problem while looking for a place in Tokyo. As it would be the case with many person-to-person offering, it would be a good idea do investigate a potential logging well before deciding, as some places seem to have weird prices or other untrustworthy conditions. "],["yu-gi-oh-tcg-inferential-analysis.html", "2 Yu-gi-oh! TCG Inferential Analysis 2.1 Introduction 2.2 Considerations 2.3 Before We Start 2.4 Prepping the Data 2.5 Quantitative showings of Archetypes, attributes and types 2.6 Inferential Observations 2.7 Conclusions", " 2 Yu-gi-oh! TCG Inferential Analysis 2.1 Introduction Yu-gi-oh! is one of the strongest IPs on the entertainment industry to have come from Japan. The franchise, which started with the same name manga from 1996 grew to become a true powerhouse, spanning many works related to it such as many anime adaptations, movies and an array of merchandising. However, the most impactful and impressive work related to the IP is the eponymous card game, which originally spawned by the manga. The trading card game was launched by Konami in 1999 in Japan and March 2002 in North America.[ As of January 2021, the game is estimated to have sold about 35 billion cards worldwide and grossed over ¥1 trillion ($9.64 billion). Needless to say, it has an impressive fame. Throghout over two decades of existence, the card game has launched more than 12 thousand cards in its history. This analysis will try to do an inferential analysis on the available card data. 2.2 Considerations Before we begin our analysis, we need to do some considerations first. This study will focus solely on the western release of the card game, named TCG for Trading Card Game. The original card game, named OCG or basically the original japanese version works with a slightly different cardpool and restrictions than its western counterpart. This study will be based on a database provided in the link https://github.com/Pietracoops/yugioh_cardlist_scraper/releases. The latest data comes from the “Battle of Legend: Crystal Revenge” pack, launched in 2022/18/12. This analysis will be conducted in R programming language using Rstudio. This dataset goes until november 2022, and so it uses values from that time. This is included in the banlist for the game. Yu-gi-oh!, just like many card games occasionally decides to ban or limit certain cards in order to promote competitive balancing. A banned card will be listed as “Forbidden” in the dataset, and cards with no restriction are marked as “Unlimited”. 2.3 Before We Start First of all, we need to have a basic understanding of how exactly are the Yu-gi-oh! cards. This will make the classification more understandable. For the sake of this presentation we don’t need to go by the game’s rules and its intricacies, but it’s important we understand how its cards are classified. By and large, there are 3 type of cards in “Yu-gi-oh!”. Monster cards, Spell cards and Trap cards. While spell and trap cards have different classifications of how they are used, they all share common colors. Regardless of the type, all spell cards will have the same turquoise-blue color, and all the trap cards will have a violet like color, like the examples below. Example of Spell and Trap, respectively Now, an example of an average monster card And finally, examples of the remaining types of cards Fusion, Link, XYZ, Pendulum synchro and ritual monster, respectively These are examples of each type of card that we see in the card game. Now let’s move on to the analysis. 2.4 Prepping the Data After we download the data and extract it, we can take a look on it and understand its formatting. All the tables in the dataset are saved separately as CSV files and sorted by its release set. Some cards are released in what we call “Booster boxes”, packages that have a randomized chance of having certain cards when opening them. Others come in special sets such as tins, special packs releasing with movies or events, and others even come in pre-made ready-to-play decks called “Structure Decks”. This division by itself could warrant an analysis, but that wont be necessary for this study. For those who are not familiar with the game itself but are curious on how to play it, I recommend the link https://www.wikihow.com/Play-Yu-Gi-Oh! Since the data we downloaded are in CSV format, we might want to change the relevant data to Integer type. For the game of Yu-gi-Oh!, the following values are very important numerically: attack, defense, Link, Rank, Level and Pendulum Scale. Also, for the sake of simplicity, let’s convert all of the files into a single table. Since the separating value is a “$”, we need to specify it in our code. I’m also going to include the source of each table in a separate column, it might be useful for our analysis. But first of all, let’s install some packages that will be useful in this analysis. library(ggplot2) library(tidyr) library(dplyr) library(readr) library(tools) library(stringr) library(cluster) library(purrr) I’ve already compiled all of the dataset into a single CSV file in order to facilitate the reading and make things simpler while analyzing. Now, we may have a quick glance at the data using R. data &lt;- read.csv(&quot;C:/Users/Lucas/Documents/R/yugioh/Yugioh_R_merged_data.csv&quot;) data ## Passcode Name Status Attribute type link link_arrows rank pendulum_scale ## 1 56619314 D/D/D Dragon King Pendragon Unlimited DARK [Fiend/Effect] NA &lt;NA&gt; NA NA ## 2 11761845 Beast of Talwar Unlimited DARK [Fiend/Normal] NA &lt;NA&gt; NA NA ## 3 49881766 Archfiend Soldier Unlimited DARK [Fiend/Normal] NA &lt;NA&gt; NA NA ## 4 54343893 Vice Dragon Unlimited DARK [Dragon/Effect] NA &lt;NA&gt; NA NA ## 5 85306040 Goblin Elite Attack Force Unlimited EARTH [Fiend/Effect] NA &lt;NA&gt; NA NA ## 6 84914462 Axe Dragonute Unlimited DARK [Dragon/Effect] NA &lt;NA&gt; NA NA ## 7 94664694 Mad Archfiend Unlimited DARK [Fiend/Effect] NA &lt;NA&gt; NA NA ## 8 12235475 Fabled Ashenveil Unlimited LIGHT [Fiend/Effect] NA &lt;NA&gt; NA NA ## 9 51838385 Theban Nightmare Unlimited LIGHT [Fiend/Effect] NA &lt;NA&gt; NA NA ## 10 16719802 Bright Star Dragon Unlimited LIGHT [Dragon/Effect] NA &lt;NA&gt; NA NA ## 11 20586572 Exploder Dragon Unlimited EARTH [Dragon/Effect] NA &lt;NA&gt; NA NA ## 12 48343627 Grave Squirmer Unlimited DARK [Fiend/Effect] NA &lt;NA&gt; NA NA ## 13 97169186 Smashing Ground Unlimited SPELL NA &lt;NA&gt; NA NA ## 14 5318639 Mystical Space Typhoon Unlimited SPELL NA &lt;NA&gt; NA NA ## 15 40619825 Axe of Despair Unlimited SPELL NA &lt;NA&gt; NA NA ## 16 10012614 Banner of Courage Unlimited SPELL NA &lt;NA&gt; NA NA ## 17 44095762 Mirror Force Unlimited TRAP NA &lt;NA&gt; NA NA ## 18 62279055 Magic Cylinder Unlimited TRAP NA &lt;NA&gt; NA NA ## 19 60082869 Dust Tornado Unlimited TRAP NA &lt;NA&gt; NA NA ## 20 57882509 Mask of Weakness Unlimited TRAP NA &lt;NA&gt; NA NA ## 21 97077563 Call of the Haunted Unlimited TRAP NA &lt;NA&gt; NA NA ## 22 19221310 Odd-Eyes Saber Dragon Unlimited LIGHT [Dragon/Effect] NA &lt;NA&gt; NA NA ## 23 43096270 Alexandrite Dragon Unlimited LIGHT [Dragon/Normal] NA &lt;NA&gt; NA NA ## 24 15025844 Mystical Elf Unlimited LIGHT [Spellcaster/Normal] NA &lt;NA&gt; NA NA ## 25 53025096 Odd-Eyes Dragon Unlimited DARK [Dragon/Effect] NA &lt;NA&gt; NA NA ## 26 70095154 Cyber Dragon Unlimited LIGHT [Machine/Effect] NA &lt;NA&gt; NA NA ## 27 66337215 Herald of Creation Unlimited LIGHT [Spellcaster/Effect] NA &lt;NA&gt; NA NA ## 28 15960641 Mirage Dragon Unlimited LIGHT [Dragon/Effect] NA &lt;NA&gt; NA NA ## 29 93013676 Maha Vailo Unlimited LIGHT [Spellcaster/Effect] NA &lt;NA&gt; NA NA ## 30 38520918 Ancient Dragon Unlimited LIGHT [Dragon/Effect] NA &lt;NA&gt; NA NA ## 31 14506878 DUCKER Mobile Cannon Unlimited LIGHT [Machine/Flip/Effect] NA &lt;NA&gt; NA NA ## 32 60694662 Skelengel Unlimited LIGHT [Fairy/Flip/Effect] NA &lt;NA&gt; NA NA ## 33 51196174 The Calculator Unlimited LIGHT [Thunder/Effect] NA &lt;NA&gt; NA NA ## 34 53129443 Dark Hole Unlimited SPELL NA &lt;NA&gt; NA NA ## 35 70046172 Rush Recklessly Unlimited SPELL NA &lt;NA&gt; NA NA ## 36 65169794 Black Pendant Unlimited SPELL NA &lt;NA&gt; NA NA ## 37 99597615 Malevolent Nuzzler Unlimited SPELL NA &lt;NA&gt; NA NA ## 38 4206964 Trap Hole Unlimited TRAP NA &lt;NA&gt; NA NA ## 39 44509898 Pinpoint Guard Unlimited TRAP NA &lt;NA&gt; NA NA ## 40 14315573 Negate Attack Unlimited TRAP NA &lt;NA&gt; NA NA ## 41 76902476 Mecha Phantom Beast Turtletracer Unlimited WIND [Machine/Effect] NA &lt;NA&gt; NA NA ## 42 79867938 Battlin&#39; Boxer Headgeared Unlimited FIRE [Warrior/Effect] NA &lt;NA&gt; NA NA ## 43 5361647 Battlin&#39; Boxer Glassjaw Unlimited FIRE [Warrior/Effect] NA &lt;NA&gt; NA NA ## 44 32750341 Battlin&#39; Boxer Sparrer Unlimited FIRE [Warrior/Effect] NA &lt;NA&gt; NA NA ## 45 68144350 Battlin&#39; Boxer Switchitter Unlimited FIRE [Warrior/Effect] NA &lt;NA&gt; NA NA ## level attack defense spell_attribute summoning_condition pendulum_condition ## 1 7 2600 2400 &lt;NA&gt; &lt;NA&gt; ## 2 6 2400 2150 &lt;NA&gt; &lt;NA&gt; ## 3 4 1900 1500 &lt;NA&gt; &lt;NA&gt; ## 4 5 2000 2400 &lt;NA&gt; &lt;NA&gt; ## 5 4 2200 1500 &lt;NA&gt; &lt;NA&gt; ## 6 4 2000 1200 &lt;NA&gt; &lt;NA&gt; ## 7 4 1800 0 &lt;NA&gt; &lt;NA&gt; ## 8 4 1600 1200 &lt;NA&gt; &lt;NA&gt; ## 9 4 1500 500 &lt;NA&gt; &lt;NA&gt; ## 10 4 1900 1000 &lt;NA&gt; &lt;NA&gt; ## 11 3 1000 0 &lt;NA&gt; &lt;NA&gt; ## 12 1 0 0 &lt;NA&gt; &lt;NA&gt; ## 13 NA NA NA &lt;NA&gt; &lt;NA&gt; ## 14 NA NA NA Quick-Play &lt;NA&gt; &lt;NA&gt; ## 15 NA NA NA Equip &lt;NA&gt; &lt;NA&gt; ## 16 NA NA NA Continuous &lt;NA&gt; &lt;NA&gt; ## 17 NA NA NA &lt;NA&gt; &lt;NA&gt; ## 18 NA NA NA &lt;NA&gt; &lt;NA&gt; ## 19 NA NA NA &lt;NA&gt; &lt;NA&gt; ## 20 NA NA NA &lt;NA&gt; &lt;NA&gt; ## 21 NA NA NA Continuous &lt;NA&gt; &lt;NA&gt; ## 22 7 2800 2000 &lt;NA&gt; &lt;NA&gt; ## 23 4 2000 100 &lt;NA&gt; &lt;NA&gt; ## 24 4 800 2000 &lt;NA&gt; &lt;NA&gt; ## 25 7 2500 2000 &lt;NA&gt; &lt;NA&gt; ## 26 5 2100 1600 &lt;NA&gt; &lt;NA&gt; ## 27 4 1800 600 &lt;NA&gt; &lt;NA&gt; ## 28 4 1600 600 &lt;NA&gt; &lt;NA&gt; ## 29 4 1550 1400 &lt;NA&gt; &lt;NA&gt; ## 30 4 1400 1300 &lt;NA&gt; &lt;NA&gt; ## 31 3 500 500 &lt;NA&gt; &lt;NA&gt; ## 32 2 900 400 &lt;NA&gt; &lt;NA&gt; ## 33 2 NA 0 &lt;NA&gt; &lt;NA&gt; ## 34 NA NA NA &lt;NA&gt; &lt;NA&gt; ## 35 NA NA NA Quick-Play &lt;NA&gt; &lt;NA&gt; ## 36 NA NA NA Equip &lt;NA&gt; &lt;NA&gt; ## 37 NA NA NA Equip &lt;NA&gt; &lt;NA&gt; ## 38 NA NA NA &lt;NA&gt; &lt;NA&gt; ## 39 NA NA NA &lt;NA&gt; &lt;NA&gt; ## 40 NA NA NA Counter &lt;NA&gt; &lt;NA&gt; ## 41 3 500 2000 &lt;NA&gt; ## 42 4 1000 1800 &lt;NA&gt; ## 43 4 2000 0 &lt;NA&gt; ## 44 4 1200 1400 &lt;NA&gt; ## 45 4 1500 1400 &lt;NA&gt; ## card_text ## 1 If this card is in your hand: You can Tribute 1 Dragon-Type monster and 1 other Fiend-Type monster from your hand and/or your side of the field; Special Summon this card. Once per turn: You can discard 1 card; this card gains 500 ATK, then you can destroy 1 Spell/Trap Card on the field. This ATK increase lasts until the end of this turn. ## 2 Only the master of the sword among Fiend-Type monsters is permitted to hold the Talwar.(This card is always treated as an &quot;Archfiend&quot; card.) ## 3 An expert at battle who belongs to a crack diabolical unit. He&#39;s famous because he always gets the job done. ## 4 If your opponent controls a monster and you control no monsters, you can Special Summon this card (from your hand), but its original ATK and DEF become halved. ## 5 If this card attacks, it is changed to Defense Position at the end of the Battle Phase, and its battle position cannot be changed until the end of your next turn. ## 6 If this card attacks, it is changed to Defense Position at the end of the Damage Step. ## 7 If this card attacks a Defense Position monster, inflict piercing battle damage to your opponent. If this face-up Attack Position card is targeted for an attack: Change it to Defense Position. ## 8 Once per battle, if this card battles, during damage calculation (Quick Effect): You can send 1 card from your hand to the GY; this card gains 600 ATK during that damage calculation only. ## 9 Gains 1500 ATK while you have no cards in your hand nor in your Spell &amp; Trap Zones. ## 10 When this card is Normal Summoned: You can target 1 other face-up monster on the field; increase that target&#39;s Level by 2 until the end of this turn. ## 11 If this card is destroyed by battle and sent to the GY: Destroy the monster that destroyed it. Neither player takes any battle damage from attacks involving this attacking card. ## 12 If this card is destroyed by battle and sent to the GY: Target 1 card on the field; destroy that target. ## 13 Destroy the 1 face-up monster your opponent controls that has the highest DEF (your choice, if tied). ## 14 Target 1 Spell/Trap on the field; destroy that target. ## 15 (This card is always treated as an &quot;Archfiend&quot; card.)The equipped monster gains 1000 ATK. When this card is sent from the field to the Graveyard: You can Tribute 1 monster; place this card on the top of your Deck. ## 16 All monsters you control gain 200 ATK during your Battle Phase only. ## 17 When an opponent&#39;s monster declares an attack: Destroy all your opponent&#39;s Attack Position monsters. ## 18 When an opponent&#39;s monster declares an attack: Target the attacking monster; negate the attack, and if you do, inflict damage to your opponent equal to its ATK. ## 19 Target 1 Spell/Trap your opponent controls; destroy that target, then you can Set 1 Spell/Trap from your hand. ## 20 Target 1 attacking monster; that target loses 700 ATK until the end of this turn. ## 21 Activate this card by targeting 1 monster in your GY; Special Summon that target in Attack Position. When this card leaves the field, destroy that monster. When that monster is destroyed, destroy this card. ## 22 If this card is in your hand: You can Tribute 1 LIGHT monster; send 1 &quot;Odd-Eyes Dragon&quot; from your hand, Deck, or your side of the field to the Graveyard, and if you do, Special Summon this card. When this card destroys a monster by battle and sends it to the Graveyard: You can destroy 1 monster your opponent controls. ## 23 Many of the czars&#39; lost jewels can be found in the scales of this priceless dragon. Its creator remains a mystery, along with how they acquired the imperial treasures. But whosoever finds this dragon has hit the jackpot... whether they know it or not. ## 24 A delicate elf that lacks offense, but has a terrific defense backed by mystical power. ## 25 If this card destroys an opponent&#39;s monster by battle and sends it to the Graveyard: Inflict damage to your opponent equal to half the original ATK of that monster in the Graveyard. ## 26 If only your opponent controls a monster, you can Special Summon this card (from your hand). ## 27 Once per turn: You can discard 1 card, then target 1 Level 7 or higher monster in your Graveyard; add that target to your hand. ## 28 Your opponent cannot activate Trap Cards during the Battle Phase. ## 29 Gains 500 ATK for each Equip Card equipped to this card. ## 30 When this card inflicts battle damage to your opponent by a direct attack: You can increase this card&#39;s Level by 1 and ATK by 500. ## 31 FLIP: Target 1 Level 4 monster in your GY; add that target to your hand. ## 32 FLIP: Draw 1 card. ## 33 The ATK of this card is the combined Levels of all face-up monsters you control x 300. ## 34 Destroy all monsters on the field. ## 35 Target 1 face-up monster on the field; it gains 700 ATK until the end of this turn. ## 36 The equipped monster gains 500 ATK. When this card is sent from the field to the Graveyard: Inflict 500 damage to your opponent. ## 37 The equipped monster gains 700 ATK. When this card is sent from the field to the Graveyard: You can pay 500 LP; place this card on the top of your Deck. ## 38 When your opponent Normal or Flip Summons 1 monster with 1000 or more ATK: Target that monster; destroy that target. ## 39 When an opponent&#39;s monster declares an attack: Target 1 Level 4 or lower monster in your Graveyard; Special Summon it in Defense Position. It cannot be destroyed by battle or card effects this turn. ## 40 When an opponent&#39;s monster declares an attack: Target the attacking monster; negate the attack, then end the Battle Phase. ## 41 This card&#39;s Level is increased by the total Levels of all &quot;Mecha Phantom Beast Tokens&quot; you control. While you control a Token, this card cannot be destroyed by battle or card effects. Each turn, the first &quot;Mecha Phantom Beast Token&quot; you control that would be destroyed by battle, is not destroyed. ## 42 When this card is Normal Summoned: You can send 1 &quot;Battlin&#39; Boxer&quot; monster from your Deck to the Graveyard. Once per turn, this face-up Attack Position card cannot be destroyed by battle. ## 43 When this card is targeted for an attack: Destroy this card. When this card is sent to the Graveyard by a card effect: You can target 1 &quot;Battlin&#39; Boxer&quot; monster in your Graveyard, except &quot;Battlin&#39; Boxer Glassjaw&quot;; add that target to your hand. ## 44 If you control a &quot;Battlin&#39; Boxer&quot; monster, you can Special Summon this card (from your hand). If you do, you cannot conduct your Battle Phase for the rest of this turn. ## 45 When this card is Normal Summoned: You can target 1 &quot;Battlin&#39; Boxer&quot; monster in your Graveyard; Special Summon that target. You cannot Special Summon any monsters during the turn you activate this effect, except &quot;Battlin&#39; Boxer&quot; monsters. ## card_supports card_anti_supports ## 1 Dragon/Fiend &lt;NA&gt; ## 2 &lt;NA&gt; ## 3 &lt;NA&gt; ## 4 &lt;NA&gt; ## 5 &lt;NA&gt; ## 6 &lt;NA&gt; ## 7 &lt;NA&gt; ## 8 &lt;NA&gt; ## 9 &lt;NA&gt; ## 10 &lt;NA&gt; ## 11 &lt;NA&gt; ## 12 &lt;NA&gt; ## 13 &lt;NA&gt; ## 14 &lt;NA&gt; ## 15 &lt;NA&gt; ## 16 &lt;NA&gt; ## 17 &lt;NA&gt; ## 18 &lt;NA&gt; ## 19 &lt;NA&gt; ## 20 &lt;NA&gt; ## 21 &lt;NA&gt; ## 22 LIGHT/Odd-Eyes Dragon &lt;NA&gt; ## 23 &lt;NA&gt; ## 24 &lt;NA&gt; ## 25 &lt;NA&gt; ## 26 &lt;NA&gt; ## 27 &lt;NA&gt; ## 28 &lt;NA&gt; ## 29 Equip Card &lt;NA&gt; ## 30 &lt;NA&gt; ## 31 &lt;NA&gt; ## 32 &lt;NA&gt; ## 33 &lt;NA&gt; ## 34 &lt;NA&gt; ## 35 &lt;NA&gt; ## 36 &lt;NA&gt; ## 37 &lt;NA&gt; ## 38 &lt;NA&gt; ## 39 &lt;NA&gt; ## 40 &lt;NA&gt; ## 41 Mecha Phantom Beast Token ## 42 Supports archetypes /Battlin&#39; Boxer ## 43 Supports archetypes /Battlin&#39; Boxer ## 44 Supports archetypes /Battlin&#39; Boxer ## 45 Supports archetypes /Battlin&#39; Boxer ## card_actions ## 1 Tributes for cost/Discards for cost ## 2 ## 3 ## 4 Activates from your hand ## 5 Changes battle positions/Prevents Battle Position changes ## 6 Changes battle positions ## 7 Changes battle positions ## 8 Sends from hand to Graveyard for cost ## 9 ## 10 Activates upon Normal Summon ## 11 Activates if destroyed by battle/Activates from your Graveyard ## 12 Activates if destroyed by battle/Activates from your Graveyard ## 13 ## 14 ## 15 Activates from your Graveyard/Tributes for cost/Returns itself from Graveyard to Deck ## 16 ## 17 Activates upon attack declaration ## 18 Activates upon attack declaration ## 19 Sets from your hand ## 20 Activates upon attack declaration ## 21 ## 22 Activates from your hand/Tributes for cost/Sends from your hand to your Graveyard/Sends from your Deck to your Graveyard/Sends from your field to your Graveyard/Activates when it destroys a monster by battle ## 23 ## 24 ## 25 Activates when it destroys a monster by battle ## 26 Activates from your hand ## 27 Discards for cost/Adds from Graveyard to hand ## 28 ## 29 ## 30 Activates when it inflicts battle damage ## 31 Activates upon being flipped face-up/Adds from Graveyard to hand ## 32 You draw cards ## 33 ## 34 ## 35 ## 36 Activates from your Graveyard ## 37 Activates from your Graveyard/Returns itself from Graveyard to Deck ## 38 ## 39 Activates upon attack declaration ## 40 Activates upon attack declaration/Ends the Battle Phase ## 41 ## 42 Sends from your Deck to your Graveyard ## 43 Activates upon attack declaration/Activates from your Graveyard/Adds from Graveyard to hand ## 44 Cannot conduct Battle Phase ## 45 Activates upon Normal Summon ## effect_types X source ## 1 Ignition NA 2-PLAYER STARTER DECK YUYA &amp; DECLAN (UK) ## 2 NA 2-PLAYER STARTER DECK YUYA &amp; DECLAN (UK) ## 3 NA 2-PLAYER STARTER DECK YUYA &amp; DECLAN (UK) ## 4 Summon NA 2-PLAYER STARTER DECK YUYA &amp; DECLAN (UK) ## 5 Continuous NA 2-PLAYER STARTER DECK YUYA &amp; DECLAN (UK) ## 6 Continuous NA 2-PLAYER STARTER DECK YUYA &amp; DECLAN (UK) ## 7 Continuous/Trigger NA 2-PLAYER STARTER DECK YUYA &amp; DECLAN (UK) ## 8 Quick NA 2-PLAYER STARTER DECK YUYA &amp; DECLAN (UK) ## 9 Continuous NA 2-PLAYER STARTER DECK YUYA &amp; DECLAN (UK) ## 10 Trigger NA 2-PLAYER STARTER DECK YUYA &amp; DECLAN (UK) ## 11 Trigger/Continuous NA 2-PLAYER STARTER DECK YUYA &amp; DECLAN (UK) ## 12 Trigger NA 2-PLAYER STARTER DECK YUYA &amp; DECLAN (UK) ## 13 Effect NA 2-PLAYER STARTER DECK YUYA &amp; DECLAN (UK) ## 14 Effect NA 2-PLAYER STARTER DECK YUYA &amp; DECLAN (UK) ## 15 Condition/Continuous-like/Trigger-like NA 2-PLAYER STARTER DECK YUYA &amp; DECLAN (UK) ## 16 Continuous-like NA 2-PLAYER STARTER DECK YUYA &amp; DECLAN (UK) ## 17 Activation requirement/Effect NA 2-PLAYER STARTER DECK YUYA &amp; DECLAN (UK) ## 18 Activation requirement/Effect NA 2-PLAYER STARTER DECK YUYA &amp; DECLAN (UK) ## 19 Effect NA 2-PLAYER STARTER DECK YUYA &amp; DECLAN (UK) ## 20 Effect NA 2-PLAYER STARTER DECK YUYA &amp; DECLAN (UK) ## 21 Effect/Continuous-like NA 2-PLAYER STARTER DECK YUYA &amp; DECLAN (UK) ## 22 Ignition/Trigger NA 2-PLAYER STARTER DECK YUYA &amp; DECLAN (UK) ## 23 NA 2-PLAYER STARTER DECK YUYA &amp; DECLAN (UK) ## 24 NA 2-PLAYER STARTER DECK YUYA &amp; DECLAN (UK) ## 25 Trigger NA 2-PLAYER STARTER DECK YUYA &amp; DECLAN (UK) ## 26 Unclassified NA 2-PLAYER STARTER DECK YUYA &amp; DECLAN (UK) ## 27 Ignition NA 2-PLAYER STARTER DECK YUYA &amp; DECLAN (UK) ## 28 Continuous NA 2-PLAYER STARTER DECK YUYA &amp; DECLAN (UK) ## 29 Continuous NA 2-PLAYER STARTER DECK YUYA &amp; DECLAN (UK) ## 30 Trigger NA 2-PLAYER STARTER DECK YUYA &amp; DECLAN (UK) ## 31 Flip NA 2-PLAYER STARTER DECK YUYA &amp; DECLAN (UK) ## 32 Flip NA 2-PLAYER STARTER DECK YUYA &amp; DECLAN (UK) ## 33 Continuous NA 2-PLAYER STARTER DECK YUYA &amp; DECLAN (UK) ## 34 Effect NA 2-PLAYER STARTER DECK YUYA &amp; DECLAN (UK) ## 35 Effect NA 2-PLAYER STARTER DECK YUYA &amp; DECLAN (UK) ## 36 Continuous-like/Trigger-like NA 2-PLAYER STARTER DECK YUYA &amp; DECLAN (UK) ## 37 Continuous-like/Trigger-like NA 2-PLAYER STARTER DECK YUYA &amp; DECLAN (UK) ## 38 Activation requirement/Effect NA 2-PLAYER STARTER DECK YUYA &amp; DECLAN (UK) ## 39 Activation requirement/Effect NA 2-PLAYER STARTER DECK YUYA &amp; DECLAN (UK) ## 40 Activation requirement/Effect NA 2-PLAYER STARTER DECK YUYA &amp; DECLAN (UK) ## 41 Continuous NA 2014 MEGA-TINS MEGA PACK ## 42 Trigger/Continuous NA 2014 MEGA-TINS MEGA PACK ## 43 Trigger NA 2014 MEGA-TINS MEGA PACK ## 44 Summon/Condition NA 2014 MEGA-TINS MEGA PACK ## 45 Trigger/Condition NA 2014 MEGA-TINS MEGA PACK ## [ reached &#39;max&#39; / getOption(&quot;max.print&quot;) -- omitted 29766 rows ] There we have it. But something is off. If the number of existing cards barely surpasses 12.000, it seems weird that we have almost 29.811 different rows. Let’s investigate by checking the number of different card names we have. We can make a function for that. distinct_names &lt;- data %&gt;% distinct(Name) %&gt;% nrow() distinct_names ## [1] 11694 This seems more likely. However we have to ask now: why do we have so many rows then? An hypothesis is that the same card can appear in different sets. In fact, some cards even have alternative artworks, but by the game rules they are all considered the same. Just like the following example: All of these are the same monster. For the game, you could literally use any of these and any would have the same effects and values. In Yu-gi-oh!, card uniqueness is dictated by the card name above all else. Be mindful that each deck can only have 3 copies of the same card, regardless of what different artworks you use. Now, let’s do two things: change the “Source” column to “Set”, for the sake of sounding more adequate for our analysis. data &lt;- rename(data, Set = source) colnames(data) ## [1] &quot;Passcode&quot; &quot;Name&quot; &quot;Status&quot; &quot;Attribute&quot; &quot;type&quot; ## [6] &quot;link&quot; &quot;link_arrows&quot; &quot;rank&quot; &quot;pendulum_scale&quot; &quot;level&quot; ## [11] &quot;attack&quot; &quot;defense&quot; &quot;spell_attribute&quot; &quot;summoning_condition&quot; &quot;pendulum_condition&quot; ## [16] &quot;card_text&quot; &quot;card_supports&quot; &quot;card_anti_supports&quot; &quot;card_actions&quot; &quot;effect_types&quot; ## [21] &quot;X&quot; &quot;Set&quot; Now, just in case, let’s try an example. Let’s look for a particular card that appears in different sets. Let’s use the example of “Dark Magician”, showed above, as it’s one of the most popular cards in the game and so it will surely be included in various Sets. dark_magician &lt;- data[data$Name == &quot;Dark Magician&quot;, ] head(dark_magician) ## Passcode Name Status Attribute type link link_arrows rank pendulum_scale level attack defense ## 788 46986414 Dark Magician Unlimited DARK [Spellcaster/Normal] NA &lt;NA&gt; NA NA 7 2500 2100 ## 1037 46986414 Dark Magician Unlimited DARK [Spellcaster/Normal] NA NA NA 7 2500 2100 ## 3215 46986414 Dark Magician Unlimited DARK [Spellcaster/Normal] NA NA NA 7 2500 2100 ## 4796 46986414 Dark Magician Unlimited DARK [Spellcaster/Normal] NA &lt;NA&gt; NA NA 7 2500 2100 ## 4802 46986414 Dark Magician Unlimited DARK [Spellcaster/Normal] NA &lt;NA&gt; NA NA 7 2500 2100 ## 6690 46986414 Dark Magician Unlimited DARK [Spellcaster/Normal] NA &lt;NA&gt; NA NA 7 2500 2100 ## spell_attribute summoning_condition pendulum_condition card_text card_supports ## 788 &lt;NA&gt; The ultimate wizard in terms of attack and defense. ## 1037 &lt;NA&gt; The ultimate wizard in terms of attack and defense. ## 3215 The ultimate wizard in terms of attack and defense. ## 4796 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; The ultimate wizard in terms of attack and defense. ## 4802 &lt;NA&gt; &lt;NA&gt; The ultimate wizard in terms of attack and defense. &lt;NA&gt; ## 6690 &lt;NA&gt; The ultimate wizard in terms of attack and defense. ## card_anti_supports card_actions effect_types X Set ## 788 &lt;NA&gt; NA 2016 MEGA-TINS ## 1037 NA 2017 MEGA-TINS ## 3215 NA BATTLE OF CHAOS ## 4796 &lt;NA&gt; &lt;NA&gt; NA BOOSTER PACK TIN 2002 ## 4802 NA BOOSTER PACK TIN 2003 ## 6690 NA DARK BEGINNING 1 Dark Magician was included in 45 different sets throughout the game’s history. Since it’s not the only card with repeated appearances, that should explain the extra number of rows. We can also do that for other popular cards such as the iconic “Blue-eyes White Dragon”, but that is not necessary at the moment. Now that the data is prepared, we can go on to our next step of the analysis. 2.5 Quantitative showings of Archetypes, attributes and types At first, while analyzing something like a videogame or a card game, we need to understand what could be considered important. As a 20 year old game, Yu-gi-oh! saw many experiments and interactions in its formula. While the initial period seemed somewhat experimental, some changes along the way shaped much of its path and design choices for the future. As a business, understanding a firm guideline to take can greatly streamline the creative process for future releases as well and helping the consumers to understand what kind of property it is about. As we saw before, the cards have many divisions, and the layering of them it is what makes gameplay strategies so complex. It may not be seen at first by just looking at the dataset, but by knowing the game’s history is that some years after the initial release and early experimentation Konami - the holders of the license for the card game - came into the “Archetype” formula for card design. And what exactly is an archetype? Part of the “Danger!” Archetype An archetype is basically a “theme” by which some cards go in. This theme may be many different things. On the example above, the “Danger!” archetype is based on real life cryptids, that is, supposedly creatures that have a questionable status if they actually exist or not. However, inspirations for archetypes are varied and they may come from all corners of fantasy and even some from the real world, with each archetype containing numerous cards, some even to the dozen or so, depending on their popularity. There are more than 300 archetypes in the game currently. We can confirm this by looking at the data. We can see above that we have a column called “Card_supports”, which explains what kind of archetype it supports. Let’s be mindful however that this column also explains what kind of card or theme it can support, not necessarily an archetype per se, and not every card supports something in specific, so not all cards of the game will have a value on this column. For example, we have generic non-archetype supports like “DARK” listed here, as well as a value stating “Supports archetype”. With a new function, we can remove these “supports archetype” values and see a trimmed down list. We also have to be mindful that occasionally some cards can be part of two different archetypes, as some archetypes have lore that intertwines two or more of them, and have some common cards in-between them. pattern &lt;- &quot;Supports archetypes /&quot; # specify the pattern you want to extract # filter for cards that support archetypes archetypes &lt;- data %&gt;% filter(str_detect(card_supports, pattern)) %&gt;% mutate(card_supports = str_replace(card_supports, pattern, &quot;&quot;)) %&gt;% # combine D/D/D and D/D/D/D/D into one archetype mutate(card_supports = if_else(card_supports %in% c(&quot;D/D&quot;, &quot;D/D/D&quot;, &quot;D/&quot;, &quot;D/D/D/D/D&quot;), &quot;DDD&quot;, card_supports)) %&gt;% separate_rows(card_supports, sep = &quot;/&quot;) %&gt;% mutate(card_supports = trimws(card_supports)) %&gt;% # group by archetype and count occurrences group_by(card_supports) %&gt;% summarize(count = n()) %&gt;% # adding a sum of &quot;D&quot; and &quot;DDD&quot; rows and assign the result to only &quot;DDD&quot; mutate(card_supports = if_else(card_supports == &quot;D&quot;, &quot;DDD&quot;, card_supports)) %&gt;% group_by(card_supports) %&gt;% summarize(count = sum(count)) %&gt;% # sort by count in descending order arrange(desc(count)) archetypes ## # A tibble: 481 × 2 ## card_supports count ## &lt;chr&gt; &lt;int&gt; ## 1 Crystal Beast 200 ## 2 Elemental HERO 197 ## 3 Blackwing 189 ## 4 DDD 156 ## 5 Six Samurai 152 ## 6 Destiny HERO 133 ## 7 Performapal 129 ## 8 HERO 117 ## 9 Gladiator Beast 111 ## 10 Lightsworn 95 ## # … with 471 more rows Because of how we separate the “Supports archetypes/” marker, we need to add an exception to it to remove it from the overall count. We also need to be mindful that the archetype “D/D/D” might be a nightmare to separate because of its special wording, which constantly will clash with the separator “/”, so we need to specify an exception. With this data in hand, we can plot our first graph visualization. Because of the sheer number of variables in the archetypes, let’s limit the visualization for the 20 most popular ones. For that, let’s create a new variable called “top_20_archetypes”. pattern &lt;- &quot;Supports archetypes /&quot; #Removing the pattern # filtering for cards that support archetypes top_20_archetypes &lt;- data %&gt;% filter(str_detect(card_supports, pattern)) %&gt;% mutate(card_supports = str_replace(card_supports, pattern, &quot;&quot;)) %&gt;% # combining D/D/D and D/D/D/D/D into one archetype mutate(card_supports = if_else(card_supports %in% c(&quot;D/D&quot;, &quot;D/D/D&quot;, &quot;D/&quot;, &quot;D/D/D/D/D&quot;), &quot;DDD&quot;, card_supports)) %&gt;% separate_rows(card_supports, sep = &quot;/&quot;) %&gt;% mutate(card_supports = trimws(card_supports)) %&gt;% # grouping by archetype and counting occurrences group_by(card_supports) %&gt;% summarize(count = n()) %&gt;% # adding &quot;D&quot; and &quot;DDD&quot; to only &quot;DDD&quot; mutate(card_supports = if_else(card_supports == &quot;D&quot;, &quot;DDD&quot;, card_supports)) %&gt;% group_by(card_supports) %&gt;% summarize(count = sum(count)) %&gt;% top_n(20, count) %&gt;% # sort by count in descending order arrange(desc(count)) top_20_archetypes ## # A tibble: 22 × 2 ## card_supports count ## &lt;chr&gt; &lt;int&gt; ## 1 Crystal Beast 200 ## 2 Elemental HERO 197 ## 3 Blackwing 189 ## 4 DDD 156 ## 5 Six Samurai 152 ## 6 Destiny HERO 133 ## 7 Performapal 129 ## 8 HERO 117 ## 9 Gladiator Beast 111 ## 10 Lightsworn 95 ## # … with 12 more rows p &lt;- ggplot(top_20_archetypes, aes(x = card_supports, y = count)) + geom_bar(stat = &quot;identity&quot;) + xlab(&quot;Archetype&quot;) + ylab(&quot;Number of Cards&quot;) + ggtitle(&quot;Top 20 Archetypes&quot;) p + theme(axis.text.x = element_text(angle = 75, hjust = 1)) Using the same principles, we can also understand other quantitative metrics such as “attribute”, “type” and if the card is a “normal”, “effect”, “fusion”, “synchro” or so on. First, let’s try to plot the data by attributes. colors &lt;- c(&quot;DARK&quot; = &quot;purple&quot;, &quot;SPELL&quot; = &quot;turquoise1&quot;, &quot;TRAP&quot; = &quot;violetred1&quot;, &quot;DIVINE&quot; = &quot;gold&quot;, &quot;WATER&quot; = &quot;blue&quot;, &quot;EARTH&quot; = &quot;brown&quot;, &quot;WIND&quot; = &quot;green&quot;, &quot;FIRE&quot; = &quot;red&quot;, &quot;LIGHT&quot; = &quot;grey70&quot;) data %&gt;% filter(Attribute %in% c(&quot;DARK&quot;, &quot;SPELL&quot;, &quot;TRAP&quot;, &quot;DIVINE&quot;, &quot;WATER&quot;, &quot;EARTH&quot;, &quot;WIND&quot;, &quot;FIRE&quot;, &quot;LIGHT&quot;)) %&gt;% group_by(Attribute) %&gt;% summarize(count = n(), unique_names = n_distinct(Name)) %&gt;% ggplot(aes(x = Attribute, y = count, fill = Attribute)) + geom_bar(stat = &quot;identity&quot;) + scale_fill_manual(values = colors) + xlab(&quot;Attribute&quot;) + ylab(&quot;Number of Cards&quot;) + ggtitle(&quot;Attribute distribution&quot;) + theme(axis.text.x = element_text(angle = 75, hjust = 1)) Seeing by the graph, spells are surprisingly popular, being by far the most popular type of card. Amongst the monsters, “DARK” takes the top spot with the most representatives while “DIVINE” accounts for very few. Just out of curiosity, let’s see how many “DIVINE” are in the game. By comparisson, let’s see how many “DARK” monsters there are exactly. divine_count &lt;- table(data$Attribute)[&quot;DIVINE&quot;] print(divine_count) ## DIVINE ## 42 dark_count &lt;- table(data$Attribute)[&quot;DARK&quot;] print(dark_count) ## DARK ## 5605 It is a great contrast. “Divine” monsters really are rare in the game. Now, within the monsters, let’s see how this division works using a chart. #Subsetting the data to only include monsters and specified types types &lt;- c(&quot;Normal&quot;, &quot;Effect&quot;, &quot;Ritual&quot;, &quot;Fusion&quot;, &quot;Synchro&quot;, &quot;Xyz&quot;, &quot;Pendulum&quot;, &quot;Link&quot;,&quot;Tuner&quot;) monsters &lt;- subset(data, !is.na(Attribute) &amp; Attribute != &quot;SPELL&quot; &amp; Attribute != &quot;TRAP&quot;) #Counting the number of monsters of each type type_counts &lt;- unlist(sapply(types, function(type) { sum(str_detect(monsters$type, type)) })) #Calculating the percentage of monsters of each type type_pct &lt;- round(type_counts/sum(type_counts)*100) type_data &lt;- data.frame(type_labels = names(type_counts), type_counts = type_counts, type_pct = type_pct) #Assigning colors to each type type_colors &lt;- c(&quot;Normal&quot; = &quot;burlywood3&quot;, &quot;Effect&quot; = &quot;burlywood4&quot;, &quot;Link&quot; = &quot;blue4&quot;, &quot;Fusion&quot; = &quot;darkmagenta&quot;, &quot;Pendulum&quot; = &quot;turquoise&quot;, &quot;Ritual&quot; = &quot;steelblue3&quot;, &quot;Synchro&quot; = &quot;grey80&quot;, &quot;Tuner&quot; = &quot;orange&quot;, &quot;Xyz&quot; = &quot;gray0&quot;) # Plotting a histogram ggplot(type_data, aes(x = type_labels, y = type_counts, fill = type_labels)) + geom_bar(stat = &quot;identity&quot;) + scale_fill_manual(values = type_colors) + ggtitle(&quot;Number of Monsters by Card Type&quot;) + xlab(&quot;Monster Type&quot;) + ylab(&quot;Number of Monsters&quot;) + theme(plot.title = element_text(hjust = 0.5), axis.text.x = element_text(angle = 45, hjust = 1), legend.position = &quot;none&quot;) + scale_y_continuous(limits = c(0, max(type_data$type_counts))) + theme(axis.text.x = element_text(angle = 75, hjust = 1)) This is a pretty interesting distribution. At the beginning of the game, Effect monsters were relatively rare. Now they easily outnumber every single other subtype of monster card. It is also important to note that Ritual is the smallest of the subsets. Now, for the last quantitative visualization, let’s see the distribution amongst the game types, like “Spellcaster”, “Dragon” and etc. # Subsetting the data to only include monsters monsters &lt;- subset(data, Attribute != &quot;SPELL&quot; &amp; Attribute != &quot;TRAP&quot;) # Extracting the first type for each monster and remove the &quot;[&quot; character monsters$type &lt;- sub(&quot;\\\\[&quot;, &quot;&quot;, sub(&quot;/.*&quot;, &quot;&quot;, monsters$type)) # Defining the types to include in the plot included_types &lt;- c(&quot;Aqua&quot;, &quot;Beast&quot;, &quot;Beast-Warrior&quot;, &quot;Cyberse&quot;, &quot;Dinosaur&quot;, &quot;Divine-beast&quot;, &quot;Dragon&quot;, &quot;Fairy&quot;, &quot;Fiend&quot;, &quot;Fish&quot;, &quot;Insect&quot;, &quot;Machine&quot;, &quot;Plant&quot;, &quot;Psychic&quot;, &quot;Pyro&quot;, &quot;Reptile&quot;, &quot;Rock&quot;, &quot;Sea Serpent&quot;, &quot;Spellcaster&quot;, &quot;Thunder&quot;, &quot;Warrior&quot;, &quot;Winged Beast&quot;, &quot;Wyrm&quot;, &quot;Zombie&quot;) monsters &lt;- monsters[monsters$type %in% included_types,] # Count the number of monsters of each type type_counts &lt;- table(monsters$type) # Creating a data.frame with the type labels and counts type_data &lt;- data.frame(type_labels = names(type_counts)[names(type_counts) != &quot;Other&quot;], type_counts = as.vector(type_counts)[names(type_counts) != &quot;Other&quot;]) type_colors &lt;- c(&quot;Aqua&quot; = &quot;blue&quot;, &quot;Beast&quot; = &quot;coral4&quot;, &quot;Beast-Warrior&quot; = &quot;chocolate2&quot;, &quot;Cyberse&quot; = &quot;skyblue1&quot;, &quot;Dinosaur&quot; = &quot;khaki3&quot;, &quot;Divine-beast&quot; = &quot;darkgoldenrod1&quot;, &quot;Dragon&quot; = &quot;firebrick&quot;, &quot;Fairy&quot; = &quot;lightpink1&quot;, &quot;Fiend&quot; = &quot;red3&quot;, &quot;Fish&quot; = &quot;turquoise4&quot;, &quot;Insect&quot; = &quot;goldenrod&quot;, &quot;Machine&quot; = &quot;grey50&quot;, &quot;Plant&quot; = &quot;forestgreen&quot;, &quot;Psychic&quot; = &quot;chartreuse2&quot;, &quot;Pyro&quot; = &quot;red&quot;, &quot;Reptile&quot; = &quot;darkolivegreen1&quot;, &quot;Rock&quot; = &quot;tan4&quot;, &quot;Sea Serpent&quot; = &quot;dodgerblue3&quot;, &quot;Spellcaster&quot; = &quot;mediumorchid1&quot;, &quot;Thunder&quot; = &quot;yellow3&quot;, &quot;Warrior&quot; = &quot;dimgrey&quot;, &quot;Winged Beast&quot; = &quot;lightskyblue&quot;, &quot;Wyrm&quot; = &quot;gray70&quot;, &quot;Zombie&quot; = &quot;darkgreen&quot; ) # Plotting the histogram ggplot(type_data, aes(x = type_labels, y = type_counts, fill = type_labels)) + geom_bar(stat = &quot;identity&quot;) + scale_fill_manual(values = type_colors, guide = FALSE) + ggtitle(&quot;Number of Monsters by Type&quot;) + xlab(&quot;Monster Type&quot;) + ylab(&quot;Number of Monsters&quot;) + theme(plot.title = element_text(hjust = 0.5), axis.text.x = element_text(angle = 45, hjust = 1), legend.position = &quot;none&quot;) + scale_y_continuous(limits = c(0, max(type_data$type_counts))) + theme(axis.text.x = element_text(angle = 75, hjust = 1)) + geom_text(aes(label = type_counts), position = position_stack(vjust = 0.5), size = 3, color = &quot;black&quot;) Finally, let’s move on to levels/ranks/links. These are a huge part of the game and most of the strategies hurl around the manipulation of these values for follow-up combos and subsequent plays. Most of the times, summoning a “boss monster” - how a powerful card in each strategy is usually called - is part of the winning condition of a match. Because of that, the metagame has shifted greatly with this in consideration. Let’s see how this division can be shown in a plot. library(ggplot2) subset_data &lt;- subset(data, !is.na(level) | !is.na(rank) | !is.na(link), select = c(&quot;level&quot;, &quot;rank&quot;, &quot;link&quot;)) # Getting the unique integer values in each column level_values &lt;- unique(as.integer(subset_data$level[!is.na(subset_data$level)])) rank_values &lt;- unique(as.integer(subset_data$rank[!is.na(subset_data$rank)])) link_values &lt;- unique(as.integer(subset_data$link[!is.na(subset_data$link)])) level_counts &lt;- table(as.integer(subset_data$level)) rank_counts &lt;- table(as.integer(subset_data$rank)) link_counts &lt;- table(as.integer(subset_data$link)) count_data &lt;- data.frame( variable = rep(c(&quot;level&quot;, &quot;rank&quot;, &quot;link&quot;), c(length(level_counts), length(rank_counts), length(link_counts))), value = c(level_values, rank_values, link_values), count = c(level_counts, rank_counts, link_counts) ) ggplot(count_data, aes(x = value, y = count, fill = variable)) + geom_bar(stat = &quot;identity&quot;, position = &quot;dodge&quot;) + scale_fill_manual(values = c(&quot;red&quot;, &quot;black&quot;, &quot;blue&quot;)) + labs(x = &quot;Value&quot;, y = &quot;Count&quot;, fill = &quot;Variable&quot;) + theme_minimal() + scale_x_continuous(breaks = 1:12) Here we can see that Level 3 is the most common occurrence by a very large margin. In fact, impressively so. Finally, in our set of quantitative observations, let’s address “Attack” and “Defense”. When the game was on its initial era, the values of Attack and Defense were hallmarks of a powerful monster. Eventually, the effects of monsters and how they interacted within their archetypes came to be the most important aspect of the monsters. However, it’s important to note that most powerful monsters still carry a powerful Attack stat. Let’s also see some values of the Defense stat. # Median and frequency of the most common value for &quot;attack&quot; attack_median &lt;- median(data$attack, na.rm = TRUE) attack_freq &lt;- max(table(data$attack, useNA = &quot;ifany&quot;)) print(attack_median) ## [1] 1600 print(attack_freq) ## [1] 11162 # Median and frequency of the most common value for &quot;defense&quot; defense_median &lt;- median(data$defense, na.rm = TRUE) defense_freq &lt;- max(table(data$defense, useNA = &quot;ifany&quot;)) print(defense_median) ## [1] 1200 print(defense_freq) ## [1] 11798 1600 and 1200 are the most common values of the two variables, with their frequency being also shown above. Now, let’s move to inferential observations. 2.6 Inferential Observations Now that we found out important quantitative metrics, let’s try seeing some inferential data. 2.6.1 Attributes and Types “Attributes” and “types” are different things in the game. While some seem obvious - for example, almost every “Aqua” type will have a “Water” attribute, some might not seem much. From this, we might imagine there is some sort of correlation between the two. First let’s extract again the monster types, just like the last code. #Removing spells and traps, so it only includes monsters monsters &lt;- subset(data, Attribute != &quot;SPELL&quot; &amp; Attribute != &quot;TRAP&quot;) #Extracting the first type for each monster and removing the &quot;[&quot; character monsters$type &lt;- sub(&quot;\\\\[&quot;, &quot;&quot;, sub(&quot;/.*&quot;, &quot;&quot;, monsters$type)) # Define the types to include in the plot included_types &lt;- c(&quot;Aqua&quot;, &quot;Beast&quot;, &quot;Beast-Warrior&quot;, &quot;Cyberse&quot;, &quot;Dinosaur&quot;, &quot;Divine-beast&quot;, &quot;Dragon&quot;, &quot;Fairy&quot;, &quot;Fiend&quot;, &quot;Fish&quot;, &quot;Insect&quot;, &quot;Machine&quot;, &quot;Plant&quot;, &quot;Psychic&quot;, &quot;Pyro&quot;, &quot;Reptile&quot;, &quot;Rock&quot;, &quot;Sea Serpent&quot;, &quot;Spellcaster&quot;, &quot;Thunder&quot;, &quot;Warrior&quot;, &quot;Winged Beast&quot;, &quot;Wyrm&quot;, &quot;Zombie&quot;) # Subsetting the data to include only the included types monsters &lt;- monsters[monsters$type %in% included_types,] #Converting &quot;types&quot; and &quot;Attributes&quot; to numeric values so that we can use in the cor() function to determine correlation monsters$type_numeric &lt;- as.numeric(factor(monsters$type)) monsters$attribute_numeric &lt;- as.numeric(factor(monsters$Attribute)) #Calculating the correlation correlation_typeattribute &lt;- cor(monsters$type_numeric, monsters$attribute_numeric) correlation_typeattribute ## [1] -0.04593948 Just a reminder that correlation can have a value between “-1” and “1”, with values closer to 1 showing that the two variables are very correlated. A value like this means that there is a small correlation between the Type of a monster and its attribute, which is curious. While some types might be directly dependent on the attribute, it might be that others don’t follow that very much. 2.6.2 Level, Rank, Link and Attack/Defense As we saw before, quite a large number of cards have somewhat low values of Attack or Defense, and they also have specially low levels. Let’s try to calculate a correlation between those, as well as seeing the correlation with values of Rank and Level. Remember that a card CANNOT have more than one value of Level, Link or Rank; these variables are mutually exclusive. #Let&#39;s find the individual correlations between Attack and Defense and the Rank, Level and Link variables atk_level &lt;- cor(!is.na(data$attack),!is.na(data$level)) atk_level ## [1] 0.8722601 def_level &lt;- cor(!is.na(data$defense),!is.na(data$level)) def_level ## [1] 0.9232742 atk_rank &lt;- cor(!is.na(data$attack),!is.na(data$rank)) atk_rank ## [1] 0.1372476 def_rank &lt;- cor(!is.na(data$defense),!is.na(data$rank)) def_rank ## [1] 0.1448377 atk_link &lt;- cor(!is.na(data$attack),!is.na(data$link)) atk_link ## [1] 0.1189354 def_link &lt;- cor(!is.na(data$defense),!is.na(data$link)) def_link ## [1] -0.1928637 Some very impressive results. turns out that the value of Attack and Defense are almost directly correlated with the Level of the card, while this doesn’t hold much true for Link or Ranks. This also seems to be in accord on how the game is played. The player usually needs to set up his initial plays using weaker monsters with special effects and other support cards like spells in order to be able to use his more powerful ones. One usually doesn’t start with full power without some sort of lead up to there, in order to promote competitive balance. Because of this, let’s plot these relations in a graph. #First between Attack and Level plot(!is.na(data$attack), !is.na(data$level), xlab = &quot;Attack&quot;, ylab = &quot;Level&quot;, main = &quot;Scatterplot of Attack / Level&quot;) abline(lm(!is.na(data$level) ~ !is.na(data$attack)), col = &quot;red&quot;) plot(!is.na(data$attack), !is.na(data$level), xlab = &quot;Defense&quot;, ylab = &quot;Level&quot;, main = &quot;Scatterplot of Defense / Level&quot;) abline(lm(!is.na(data$level) ~ !is.na(data$defense)), col = &quot;red&quot;) Now, for the sake of comparison, let’s see how Attack and Defense fair in a graph being correlated to other variable, such as “Rank”, which doesn’t have a high correlation as we saw before. plot(!is.na(data$attack), !is.na(data$rank), xlab = &quot;Attack&quot;, ylab = &quot;Rank&quot;, main = &quot;Scatterplot of Attack / Rank&quot;) abline(lm(!is.na(data$rank) ~ !is.na(data$attack)), col = &quot;red&quot;) Now, let’s see if we can correlate the three variables together in a plot matrix. atk &lt;- !is.na(data$attack) def &lt;- !is.na(data$defense) lv &lt;- !is.na(data$level) subset &lt;- data.frame(atk,def,lv) cor(subset) ## atk def lv ## atk 1.0000000 0.9457381 0.8722601 ## def 0.9457381 1.0000000 0.9232742 ## lv 0.8722601 0.9232742 1.0000000 install.packages(&quot;psych&quot;) ## Error in install.packages : Updating loaded packages library(psych) pairs.panels(subset) 2.6.3 Further Exploration of Attack and Defense Let’s continue to explore the values of Attack” and “Defense” and the count of how many cards have these values. Let’s see what their normal distribution looks like . For that, let’s find out the Standard Deviation of the Attack value and use it. attack_data &lt;- na.omit(data$attack) # Calculating the standard deviation of the non-missing values in the &quot;attack&quot; column sd_attack &lt;- sd(attack_data) # Printing the value of sd_attack print(sd_attack) ## [1] 928.9226 mean(attack_data) ## [1] 1549.516 # Calculating the proportion of non-missing values in the &quot;attack&quot; column p &lt;- length(attack_data) / nrow(data) p ## [1] 0.6255745 # Printing the value of p qnorm(0.6255745,mean = 1549.516, sd = 928.9226) ## [1] 1846.915 #Let&#39;s also find the Mean absolute deviation dist_attack &lt;- attack_data - mean(attack_data) mean(abs(dist_attack)) ## [1] 752.309 #Finally, let&#39;s find the outlier values. #Finding the quartiles and IQR of the &quot;attack&quot; column q1 &lt;- quantile(attack_data, 0.25) q3 &lt;- quantile(attack_data, 0.75) iqr &lt;- q3 - q1 outlier.threshold &lt;- 1.5 * iqr #Identifying the outliers in the &quot;attack&quot; column lower.threshold &lt;- q1 - outlier.threshold upper.threshold &lt;- q3 + outlier.threshold outliers &lt;- attack_data[attack_data &lt; lower.threshold | attack_data &gt; upper.threshold] #Count the frequency of each outlier value outlier_freq &lt;- table(outliers) #Print the outliers print(outlier_freq) ## outliers ## 4200 4400 4500 4600 5000 ## 3 6 39 6 24 hist(attack_data, freq = FALSE, col = &quot;lightblue&quot;, main = &quot;Histogram of Attack Data&quot;, xlab = &quot;Attack Value&quot;) #Adding a normal density curve to the plot curve(dnorm(x, mean = mean(attack_data), sd = sd(attack_data)), add = TRUE, col = &quot;red&quot;, lwd = 2) #Adding vertical lines at the upper and lower thresholds abline(v = lower.threshold, col = &quot;blue&quot;, lwd = 2, lty = 2) abline(v = upper.threshold, col = &quot;blue&quot;, lwd = 2, lty = 2) #Adding a rug plot of the outliers to the plot rug(outliers, col = &quot;darkred&quot;, lwd = 2) Turns out that in “Attack”, our outliers - that is, values that greatly differ from the distribution - are basically concentrated on the higher end. So it turns out, in “Yu-gi-oh!” a huge quantity of monsters have attacks from 3000 or less, with only a very few surpassing that metric. Of course, by knowing the game, a modern player understand that these values can be modified, but this is the original value printed on the card. We can do the same on the Defense, to which we can basically just copy most of our code. defense_data &lt;- na.omit(data$defense) #Computing the standard deviation of the non-missing values in the &quot;attack&quot; column sd_defense &lt;- sd(defense_data) #Printing the value of sd_attack print(sd_defense) ## [1] 849.9999 mean(defense_data) ## [1] 1278.86 #Computing the proportion of non-missing values in the &quot;attack&quot; column p &lt;- length(defense_data) / nrow(data) p ## [1] 0.60424 #Printing the value of p qnorm(0.60424,mean = 1278.86, sd = 849.9999) ## [1] 1503.547 #Let&#39;s also find the Mean absolute deviation dist_defense &lt;- defense_data - mean(defense_data) mean(abs(dist_defense)) ## [1] 695.0719 #Finally, let&#39;s find the outlier values. # Finding the quartiles and IQR of the &quot;attack&quot; column q1 &lt;- quantile(defense_data, 0.25) q3 &lt;- quantile(defense_data, 0.75) iqr &lt;- q3 - q1 outlier.threshold &lt;- 1.5 * iqr # Identifying the outliers in the &quot;attack&quot; column lower.threshold &lt;- q1 - outlier.threshold upper.threshold &lt;- q3 + outlier.threshold outliers &lt;- attack_data[defense_data &lt; lower.threshold | defense_data &gt; upper.threshold] # Counting the frequency of each outlier value outlier_freq &lt;- table(outliers) print(outlier_freq) ## outliers ## 0 100 300 400 500 600 800 900 1000 1100 1200 1300 1400 1500 1600 1700 1800 1900 2000 2200 2300 2400 2500 2600 2800 ## 9 4 2 1 5 7 3 3 11 3 6 4 9 6 6 5 4 3 5 2 2 6 3 2 7 ## 3000 3300 3500 4000 4400 ## 6 1 2 2 1 hist(defense_data, freq = FALSE, col = &quot;lightblue&quot;, main = &quot;Histogram of Defense Data&quot;, xlab = &quot;Defense Value&quot;) # Adding a normal density curve to the plot curve(dnorm(x, mean = mean(defense_data), sd = sd(defense_data)), add = TRUE, col = &quot;red&quot;, lwd = 2) #Adding vertical lines at the upper and lower thresholds abline(v = lower.threshold, col = &quot;blue&quot;, lwd = 2, lty = 2) abline(v = upper.threshold, col = &quot;blue&quot;, lwd = 2, lty = 2) #Adding a rug plot of the outliers to the plot rug(outliers, col = &quot;darkred&quot;, lwd = 2) Let’s see the correlation between the values of “Attack” and “Defense” and the types we saw before. monsters &lt;- subset(data, Attribute != &quot;SPELL&quot; &amp; Attribute != &quot;TRAP&quot;) #Extracting the first type for each monster and remove the &quot;[&quot; character monsters$type &lt;- sub(&quot;\\\\[&quot;, &quot;&quot;, sub(&quot;/.*&quot;, &quot;&quot;, monsters$type)) # Defining the types to include in the plot included_types &lt;- c(&quot;Aqua&quot;, &quot;Beast&quot;, &quot;Beast-Warrior&quot;, &quot;Cyberse&quot;, &quot;Dinosaur&quot;, &quot;Divine-beast&quot;, &quot;Dragon&quot;, &quot;Fairy&quot;, &quot;Fiend&quot;, &quot;Fish&quot;, &quot;Insect&quot;, &quot;Machine&quot;, &quot;Plant&quot;, &quot;Psychic&quot;, &quot;Pyro&quot;, &quot;Reptile&quot;, &quot;Rock&quot;, &quot;Sea Serpent&quot;, &quot;Spellcaster&quot;, &quot;Thunder&quot;, &quot;Warrior&quot;, &quot;Winged Beast&quot;, &quot;Wyrm&quot;, &quot;Zombie&quot;) #Subsetting the data to include only the included types monsters &lt;- monsters[monsters$type %in% included_types,] #Convert &quot;types&quot; and &quot;Attributes&quot; to numeric values so that we can use in the cor() function to determine correlation monsters$type_numeric &lt;- as.numeric(factor(monsters$type)) #Subsetting attack and defense to only include the monsters data_attack_monsters &lt;- data[data$Name %in% monsters$Name, &quot;attack&quot;] data_defense_monsters &lt;- data[data$Name %in% monsters$Name, &quot;defense&quot;] #Calculating the correlation between type and attack/defense cor(monsters$type_numeric, monsters$attack, use = &quot;complete.obs&quot;) ## [1] -0.02362716 cor(monsters$type_numeric, monsters$defense, use = &quot;complete.obs&quot;) ## [1] -0.009771513 The correlation isn’t very strong, but leaning on average. 2.6.4 Cluster Analysis Now, let’s move on to a cluster analysis of six variables we’ve seen before: “Attack”, “Defense”, “Level”, “Rank”, “Link” and “Type”. types &lt;- monsters$type_numeric atk &lt;- !is.na(data$attack) def &lt;- !is.na(data$defense) #Creating indicator variables for rank, level, and link, because they are mutually exclusive rank_ind &lt;- ifelse(!is.na(data$rank), 1, 0) level_ind &lt;- ifelse(!is.na(data$level), 1, 0) link_ind &lt;- ifelse(!is.na(data$link), 1, 0) #Combining the different variables into a single data frame in order to plot with clusters variables &lt;- data_combined &lt;- cbind(types, atk, def, rank_ind, level_ind, link_ind) ## Warning in cbind(types, atk, def, rank_ind, level_ind, link_ind): number of rows of result is not a multiple of vector length ## (arg 1) tot_withinss &lt;- map_dbl(1:12, function(k){ model &lt;- kmeans(x = variables, centers = k) model$tot.withinss }) elbow_df &lt;- tibble(k = 1:12, tot_withinss = map_dbl(1:12, function(k){ model &lt;- kmeans(x = variables, centers = k) model$tot.withinss })) #Plotting the elbow plot ggplot(elbow_df, aes(x = k, y = tot_withinss)) + geom_line() + scale_x_continuous(breaks = 1:12) + labs(title = &quot;Elbow plot of variables&quot;, x = &quot;Clusters&quot;, y = &quot;Total within-cluster sum of squares&quot;) According to the elbow plot above, it seems like 2 is the optimal number of clusters of the six variables chosen. # Removing rows with missing values in attack or defense columns variablesc &lt;- monsters[!is.na(monsters$attack) &amp; !is.na(monsters$defense),] #Creating indicator variables for rank, level, and link, because they are mutually exclusive rank_ind &lt;- ifelse(!is.na(variablesc$rank), variablesc$rank, 0) level_ind &lt;- ifelse(!is.na(variablesc$level), variablesc$level, 0) link_ind &lt;- ifelse(!is.na(variablesc$link), variablesc$link, 0) #Combining the different variables into a single data frame in order to plot with clusters newvariables &lt;- data.frame(types = variablesc$type_numeric, atk = !is.na(variablesc$attack), def = !is.na(variablesc$defense), rank_ind, level_ind, link_ind) set.seed(100) kmeans_variables &lt;- kmeans(newvariables, centers = 4) # Adding cluster labels to variables data frame newvariables$cluster &lt;- as.factor(kmeans_variables$cluster) # Plotting variables with cluster labels ggplot(newvariables, aes(x = atk, y = def, color = cluster)) + geom_point() + labs(title = &quot;K-Means Clustering of Variables&quot;, x = &quot;Attack&quot;, y = &quot;Defense&quot;) + scale_color_discrete(name = &quot;Cluster&quot;) Well, that is certainly disappointing. Maybe we are using too many variables in our cluster plot. Let’s try using only “Attack” and “Defense” then. atkdef &lt;- data.frame(atk,def) kmeans_atkdef &lt;- kmeans(atkdef, centers = 4) # Adding cluster labels to variables data frame atkdef$cluster &lt;- as.factor(kmeans_atkdef$cluster) # Plotting variables with cluster labels ggplot(atkdef, aes(x = atk, y = def, color = cluster)) + geom_point() + labs(title = &quot;K-Means Clustering of Variables&quot;, x = &quot;Attack&quot;, y = &quot;Defense&quot;) + scale_color_discrete(name = &quot;Cluster&quot;) 2.7 Conclusions Just taking a look at the cards of “Yu-gi-oh!” in sheer quantity give us a prospect of how massively complex this game is, and we didn’t even scratch the surface with studies on game theory and the notion of power creep. However, we could access important and interesting data about available variables just by looking at the cold data from a glance. It is interesting to note important trends that could be seen as a design philosophy, specially on a game this old and this successful. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
